<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"     
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:ed="http://schemas.microsoft.com/expression/2010/drawing"
                    xmlns:ei="http://schemas.microsoft.com/expression/2010/interactions"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity">
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="../Themes/Metro/Theme.Colors.xaml" />
    <ResourceDictionary Source="../Themes/Metro/Styles.Shared.xaml" />
    <ResourceDictionary Source="../Themes/Metro/Styles.WPF.xaml" />
  </ResourceDictionary.MergedDictionaries>
  <Style TargetType="{x:Type xctk:DateTimePicker}">
    <Style.Resources>
      <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type themes:ResourceKeys}, ResourceId=SpinnerButtonStyleKey}" TargetType="RepeatButton" BasedOn="{StaticResource RepeatButtonStyle}">
      </Style>

    </Style.Resources>
    <Setter Property="Height" Value="22"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type xctk:DateTimePicker}">
          <Border>
            <Grid>
              <Grid>
                <Grid.ColumnDefinitions>
                  <ColumnDefinition Width="*"/>
                  <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <xctk:ButtonSpinner x:Name="PART_Spinner" AllowSpin="{TemplateBinding AllowSpin}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" IsTabStop="False" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}">
                  <!--I removed setters of Background and Foreground properties here-->
                  <xctk:WatermarkTextBox x:Name="PART_TextBox" AcceptsReturn="False" BorderThickness="0" FontWeight="{TemplateBinding FontWeight}" FontStyle="{TemplateBinding FontStyle}" FontStretch="{TemplateBinding FontStretch}" FontSize="{TemplateBinding FontSize}" FontFamily="{TemplateBinding FontFamily}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" MinWidth="20" Padding="0" TextAlignment="{TemplateBinding TextAlignment}" TextWrapping="NoWrap" Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TabIndex="{TemplateBinding TabIndex}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}">
                    <xctk:WatermarkTextBox.Template>
                      <ControlTemplate TargetType="{x:Type xctk:WatermarkTextBox}">
                        <Grid>
                          <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" CornerRadius="1"/>
                          <Border x:Name="MouseOverVisual" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="0">
                            <Border.BorderBrush>
                              <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                <GradientStop Color="#FF5794BF" Offset="0.05"/>
                                <GradientStop Color="#FFB7D5EA" Offset="0.07"/>
                                <GradientStop Color="#FFC7E2F1" Offset="1"/>
                              </LinearGradientBrush>
                            </Border.BorderBrush>
                          </Border>
                          <Border x:Name="FocusVisual" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="0">
                            <Border.BorderBrush>
                              <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                <GradientStop Color="#FF3D7BAD" Offset="0.05"/>
                                <GradientStop Color="#FFA4C9E3" Offset="0.07"/>
                                <GradientStop Color="#FFB7D9ED" Offset="1"/>
                              </LinearGradientBrush>
                            </Border.BorderBrush>
                          </Border>
                          <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                          <ContentPresenter x:Name="PART_WatermarkHost" ContentTemplate="{TemplateBinding WatermarkTemplate}" Content="{TemplateBinding Watermark}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="False" Margin="{TemplateBinding Padding}" Visibility="Collapsed" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                          <MultiTrigger>
                            <MultiTrigger.Conditions>
                              <Condition Property="IsFocused" Value="False"/>
                              <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Visibility" TargetName="PART_WatermarkHost" Value="Visible"/>
                          </MultiTrigger>
                          <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Opacity" TargetName="MouseOverVisual" Value="1"/>
                          </Trigger>
                          <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Opacity" TargetName="FocusVisual" Value="1"/>
                          </Trigger>
                          <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="BorderBrush" TargetName="Border" Value="#FFADB2B5"/>
                            <!--I changed Background setter value to White here-->
                            <Setter Property="Background" TargetName="Border" Value="White"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                          </Trigger>
                        </ControlTemplate.Triggers>
                      </ControlTemplate>
                    </xctk:WatermarkTextBox.Template>
                  </xctk:WatermarkTextBox>
                </xctk:ButtonSpinner>
                <ToggleButton  x:Name="_calendarToggleButton" Background="Transparent" BorderBrush="Transparent" BorderThickness="0" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
                  <ToggleButton.IsHitTestVisible>
                    <Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
                      <Binding.Converter>
                        <xctk:InverseBoolConverter/>
                      </Binding.Converter>
                    </Binding>
                  </ToggleButton.IsHitTestVisible>
                  <ToggleButton.IsEnabled>
                    <Binding Path="IsReadOnly" RelativeSource="{RelativeSource TemplatedParent}">
                      <Binding.Converter>
                        <xctk:InverseBoolConverter/>
                      </Binding.Converter>
                    </Binding>
                  </ToggleButton.IsEnabled>
                  <ToggleButton.Style>
                    <Style TargetType="{x:Type ToggleButton}" >
                      <Setter Property="Template">
                        <Setter.Value>
                          <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid SnapsToDevicePixels="True">
                              <ToggleButton x:Name="ToggleButtonChrome"
                                                 Background="Transparent"
                                                 IsChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}"
                                                 IsEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:DateTimePicker}}}">
                                <Grid>
                                  <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                  </Grid.ColumnDefinitions>
                                  <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
                                  <Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="0">
                                    <Path x:Name="Arrow" Width="9" Height="6" Fill="#FF383434" Data="F1 M 301.14,-189.041L 311.57,-189.041L 306.355,-182.942L 301.14,-189.041 Z " Stretch="Fill" RenderTransformOrigin="0.5,0.5" />
                                  </Grid>
                                </Grid>
                              </ToggleButton>
                            </Grid>
                            <ControlTemplate.Triggers>
                              <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
                              </Trigger>
                            </ControlTemplate.Triggers>
                          </ControlTemplate>
                        </Setter.Value>
                      </Setter>
                    </Style>
                  </ToggleButton.Style>
                </ToggleButton>
              </Grid>
              <Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_calendarToggleButton}" StaysOpen="False">
                <Border BorderThickness="1" Padding="3">
                  <Border.BorderBrush>
                    <LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
                      <GradientStop Color="#FFA3AEB9" Offset="0"/>
                      <GradientStop Color="#FF8399A9" Offset="0.375"/>
                      <GradientStop Color="#FF718597" Offset="0.375"/>
                      <GradientStop Color="#FF617584" Offset="1"/>
                    </LinearGradientBrush>
                  </Border.BorderBrush>
                  <Border.Background>
                    <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                      <GradientStop Color="White" Offset="0"/>
                      <GradientStop Color="#FFE8EBED" Offset="1"/>
                    </LinearGradientBrush>
                  </Border.Background>
                  <StackPanel>
                    <Calendar x:Name="PART_Calendar" BorderThickness="0" DisplayDate="2014-05-14"/>
                    <xctk:TimePicker x:Name="PART_TimeUpDown" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" ClipValueToMinMax="{Binding ClipValueToMinMax, RelativeSource={RelativeSource TemplatedParent}}" Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" FormatString="{TemplateBinding TimeFormatString}" Format="{TemplateBinding TimeFormat}" Maximum="{Binding Maximum, RelativeSource={RelativeSource TemplatedParent}}" Minimum="{Binding Minimum, RelativeSource={RelativeSource TemplatedParent}}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding TimeWatermarkTemplate}" Watermark="{TemplateBinding TimeWatermark}"/>
                  </StackPanel>
                </Border>
              </Popup>
            </Grid>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>


  <Style x:Key="ButtonSpinnerStyle1" TargetType="{x:Type xctk:ButtonSpinner}">
    <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBackgroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
    <Setter Property="BorderBrush" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlNormalBorderKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Focusable" Value="False"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="IsTabStop" Value="True"/>
    <Setter Property="Padding" Value="1"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type xctk:ButtonSpinner}">
          <Border x:Name="Border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
            <Grid>
              <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="firstContentColumn" Width="*"/>
                <ColumnDefinition x:Name="secondContentColumn" Width="Auto"/>
              </Grid.ColumnDefinitions>
              <ContentPresenter x:Name="contentPresenter" Content="{TemplateBinding Content}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
              <Grid x:Name="gridContent" Grid.Column="1" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                <Grid.RowDefinitions>
                  <RowDefinition Height="*"/>
                  <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid.Visibility>
                  <TemplateBinding Property="ShowButtonSpinner">
                    <TemplateBinding.Converter>
                      <BooleanToVisibilityConverter/>
                    </TemplateBinding.Converter>
                  </TemplateBinding>
                </Grid.Visibility>
                <RepeatButton x:Name="PART_IncreaseButton" IsTabStop="{TemplateBinding IsTabStop}" >
                  <RepeatButton.ContentTemplate>
                    <DataTemplate>
                      <Path Data="M0,3C0,3 0,4 0,4 0,4 3,4 3,4 3,4 3,3 3,3 3,3 4,3 4,3 4,3 4,4 4,4 4,4 7,4 7,4 7,4 7,3 7,3 7,3 6,3 6,3 6,3 6,2 6,2 6,2 5,2 5,2 5,2 5,1 5,1 5,1 4,1 4,1 4,1 4,0 4,0 4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphNormalForegroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="4" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="7"/>
                    </DataTemplate>
                  </RepeatButton.ContentTemplate>
                </RepeatButton>
                <RepeatButton x:Name="PART_DecreaseButton" IsTabStop="{TemplateBinding IsTabStop}" Grid.Row="1" >
                  <RepeatButton.ContentTemplate>
                    <DataTemplate>
                      <Path Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphNormalForegroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="4" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="7"/>
                    </DataTemplate>
                  </RepeatButton.ContentTemplate>
                </RepeatButton>
              </Grid>
            </Grid>
          </Border>
          <ControlTemplate.Triggers>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Background" Value="{DynamicResource {ComponentResourceKey ResourceId=ControlDisabledBackgroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}"/>
            </Trigger>
            <Trigger Property="IsEnabled" SourceName="PART_IncreaseButton" Value="False">
              <Setter Property="ContentTemplate" TargetName="PART_IncreaseButton">
                <Setter.Value>
                  <DataTemplate>
                    <Path Data="M0,3C0,3 0,4 0,4 0,4 3,4 3,4 3,4 3,3 3,3 3,3 4,3 4,3 4,3 4,4 4,4 4,4 7,4 7,4 7,4 7,3 7,3 7,3 6,3 6,3 6,3 6,2 6,2 6,2 5,2 5,2 5,2 5,1 5,1 5,1 4,1 4,1 4,1 4,0 4,0 4,0 3,0 3,0 3,0 3,1 3,1 3,1 2,1 2,1 2,1 2,2 2,2 2,2 1,2 1,2 1,2 1,3 1,3 1,3 0,3 0,3z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphDisabledForegroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="4" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="7"/>
                  </DataTemplate>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" SourceName="PART_DecreaseButton" Value="False">
              <Setter Property="ContentTemplate" TargetName="PART_DecreaseButton">
                <Setter.Value>
                  <DataTemplate>
                    <Path Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Focusable="False" Fill="{DynamicResource {ComponentResourceKey ResourceId=GlyphDisabledForegroundKey, TypeInTargetAssembly={x:Type themes:ResourceKeys}}}" HorizontalAlignment="Center" Height="4" SnapsToDevicePixels="True" VerticalAlignment="Center" Width="7"/>
                  </DataTemplate>
                </Setter.Value>
              </Setter>
            </Trigger>
            <Trigger Property="ButtonSpinnerLocation" Value="Left">
              <Setter Property="Width" TargetName="firstContentColumn" Value="Auto"/>
              <Setter Property="Width" TargetName="secondContentColumn" Value="*"/>
              <Setter Property="Grid.Column" TargetName="contentPresenter" Value="1"/>
              <Setter Property="Grid.Column" TargetName="gridContent" Value="0"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style  TargetType="{x:Type DatePickerTextBox}" >
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Center"/>
    <Setter Property="FontSize" Value="14.667"/>
    <Setter Property="Margin" Value="0,0,1,0"/>
    <Setter Property="Padding" Value="2,2,2,2"/>
    <Setter Property="Height" Value="{Binding ActualHeight,RelativeSource={RelativeSource  Mode= PreviousData}}"/>
  </Style>
  </ResourceDictionary>
